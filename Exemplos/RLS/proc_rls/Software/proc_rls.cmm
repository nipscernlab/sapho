#PRNAME proc_rls
#NUBITS 32
#NBMANT 23
#NBEXPO 8
#NDSTAC 5
#SDEPTH 5
#NUIOIN 2
#NUIOOU 2

float d;
float x[4];
float w[4];
float P[4][4];

void rls_update()
{
    // ------------------------------------------------------------------------
    // calculo do vetor de ganho K --------------------------------------------
    // ------------------------------------------------------------------------

    // multiplica matriz P com vetor de entrada x -----------------------------

    float Px[4];

    int j = 0;
    while (j < 4)
    {
        Px[j] = 0.0;

        int k = 0;
        while (k < 4)
        {
            Px[j] = Px[j] + P[j][k]*x[k];
            k++;
        }

        j++;
    }

    // calcula o denominador --------------------------------------------------

    float denom = 0.99 + <x|Px>;

    // calcula o vetor de ganho K ---------------------------------------------

    float K[4];

    j = 0;
    while (j < 4)
    {
        K[j] = Px[j]/denom;
        j++;
    }

    // ------------------------------------------------------------------------
    // calculo do erro e ------------------------------------------------------
    // ------------------------------------------------------------------------

    float e = d - <w|x>;

    // ------------------------------------------------------------------------
    // atualiza os pesos w ----------------------------------------------------
    // ------------------------------------------------------------------------

    j = 0;
    while (j < 4)
    {
        w[j] = w[j] + K[j]*e;
        j++;
    }

    // ------------------------------------------------------------------------
    // atualiza a matriz P ----------------------------------------------------
    // ------------------------------------------------------------------------

    j = 0;
    while (j < 4)
    {
        k = 0;
        while (k < 4)
        {
            P[j][k] = (P[j][k] - K[j] * x[k] * P[j][k]) / 0.99;
            k++;
        }
        j++;
    }
}

void main()
{
    // ------------------------------------------------------------------------
    // inicializa P e w -------------------------------------------------------
    // ------------------------------------------------------------------------

    int j = 0;
    while (j < 4)
    {
        P[j][j] = 1.0;
        w[j] = 0.0;
        j++;
    }

    // ------------------------------------------------------------------------
    // loop nos dados ---------------------------------------------------------
    // ------------------------------------------------------------------------

    j = 0;
    while (j < 20)
    {
        // --------------------------------------------------------------------
        // le os valores de x[n] e d ------------------------------------------
        // --------------------------------------------------------------------
        
        int k = 0;
        while (k < 4)
        {
            x[k] = in(0);
            k++;
        }
        d = in(1);

        // --------------------------------------------------------------------
        // aplica uma iteracao RLS --------------------------------------------
        // --------------------------------------------------------------------

        rls_update();

        // --------------------------------------------------------------------
        // externa os coeficientes w ------------------------------------------
        // --------------------------------------------------------------------

        k = 0;
        while (k < 4)
        {
            out(0,1000.0*w[k]);
            k++;
        }

        j++;
    }
}