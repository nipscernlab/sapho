#PRNAME ProcDTW
#DATYPE 0
#NUBITS 32
#NDSTAC 500 
#SDEPTH 500
#NUIOIN 3
#NUIOOU 3
#NBMANT 23
#NBEXPO 8

int len_ref, len_data;
int dtw[75][75];
int k, j, menor, val_final,cont;
int data_ref[75], data[75];

    
void main() 
{
    //if(in(0) == 0) //No reset geral:
    //{
        len_ref = 75;
        cont    = 0;
        while(cont < 75) // Preenchimento do vetor 1 com 0 se len_ref for 0 (para primeiro caso)
        {
            data_ref[cont] = 0;
            cont++;
        }
        out(2, 10); 
    //}
    //else //processamento normal
    //{
        out(2,-122);
        return;

#INTERPOINT
out(2,-123);        
        k = 0;
        
        len_data = in(2);        // Comprimento do vetor 2
            
        cont = 0;
        
        while(cont < 75) // Preenchimento do vetor 2
        {
            if (len_data > cont)
            {
                data[cont]= in(1);
            }
            else
            {
                data[cont] = 0;
            }
            cont++;
        }
        out(2,-124);
        out(2,k);
        out(2,len_data);
        
        while (k < len_data) // linhas da matriz dtw
        {
            j = 0;
            out(2,-125);
            while (j < len_ref)
            {
                if(k == 0 && j == 0)        // Primeira posiçao k=0, j=0 
                {
                    dtw[k][j] = abs(data[k] - data_ref[j]);
                    out(2, dtw[k][j]);
                }
                else
                {
                    if(k == 0 && j > 0)         // Primeira linha
                    {
                        dtw[k][j] = abs(data[k] - data_ref[j]) + dtw[k][j-1];
                        out(2, dtw[k][j]);
                    }
                }
                
                if (k > 0 && j == 0)             // Primeira coluna 
                {
                    dtw[k][j] = abs(data[k] - data_ref[j]) + dtw[k - 1][j];
                    out(2, dtw[k][j]);
                }
                else
                {               
                    if (k > 0 && j > 0)         // Para as demais posições
                    {
                        menor = dtw[k-1][j];
                        out(2, menor);  
                        if (dtw[k][j-1] < menor) 
                        {
                            menor = dtw[k][j-1];
                            out(2, menor);
                        }
                        out(2, dtw[k-1][j-1]);
                        if (dtw[k-1][j-1] < menor)
                        {
                            menor = dtw[k-1][j-1];
                            out(2, menor);
                        }                      
                        dtw[k][j] = abs(data[k] - data_ref[j]) + menor;
                        out(2, dtw[k][j]);
                    }
                }
                j++;
            }
            k++;
        }
        
        val_final = dtw[k-1][j-1];

        if(dtw[k-1][j-1]>36000)  //Se houver novidade
        {
            cont    = 0;           // Reset no contador
            len_ref = len_data;        // Atualização do comprimento
            while(cont < 75)    // Atualização do vetor 1
            {
                data_ref[cont]= data[cont];
                cont++ ;
            }
        }
        
        out(1,val_final);
        out(2, 36000);
        
    //}
    out(0,1);
}